{"version":3,"sources":["Player/spring.mp4","index.js","Player/index.js"],"names":["module","exports","__webpack_require__","p","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","isPlaying","setPlaying","_useState3","_useState4","progress","setProgress","_useState5","_useState6","isProgressCapturing","setProgressCapturing","videoRef","useRef","videoContainerRef","togglePlayRef","togglePlay","method","current","paused","skip","_ref","target","currentTime","Number","parseFloat","dataset","scrub","event","offsetX","nativeEvent","offsetWidth","currentTarget","scrubTime","duration","rangeUpdate","_ref2","name","value","playControl","Fragment","useEffect","handleKeydown","code","document","activeElement","addEventListener","removeEventListener","className","ref","src","video","onClick","onTimeUpdate","_videoRef$current","onMouseDown","onMouseMove","onMouseUp","style","--filledProgressBar","concat","title","max","min","step","type","onChange","data-skip","fullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","elem","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","getElementById"],"mappings":"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","file":"static/js/main.3e2f59e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spring.e4ebda65.mp4\";","// Core\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Theme\r\nimport './theme/init.css';\r\n\r\n// App\r\nimport { Player } from './Player';\r\n\r\nReactDOM.render(<Player />, document.getElementById('root'));\r\n","// Core\nimport React, { useState, useRef, useEffect } from 'react';\n\n// Instruments\nimport './styles.css';\n\nimport video from './spring.mp4';\n\nexport const Player = () => {\n    const [ isPlaying, setPlaying ] = useState(false);\n    const [ progress, setProgress ] = useState(0);\n    const [ isProgressCapturing, setProgressCapturing ] = useState(0);\n\n    /**\n     * Создаём реф для элемента video.\n     * Реф в React — это прямой доступ к html-элементу.\n     * С его помощью мы сможем управлять видеоплеером в явном виде.\n     */\n    const videoRef = useRef(null);\n    const videoContainerRef = useRef(null);\n    const togglePlayRef = useRef(null);\n\n    /* Включаем или выключаем проигрывание видео. */\n    const togglePlay = () => {\n        // баг после нажатия на Toggle Play button\n        const method = videoRef.current.paused ? 'play' : 'pause';\n\n        videoRef.current[ method ]();\n        setPlaying(method === 'play');\n    };\n\n    /* Прокручиваем прогресс проигрывания. */\n    const skip = ({target}) => {\n        /* Забираем время прокрутки из дата-атрибута JSX-элемента. */\n        // const seconds = target.dataset.skip;\n\n        videoRef.current.currentTime += Number.parseFloat(target.dataset.skip);\n    };\n\n    /* Устанавливаем прогресс проигранного видео в процентах. */\n    const handleProgress = () => {\n        const { currentTime, duration } = videoRef.current;\n\n        setProgress(currentTime / duration * 100);\n    };\n\n    /* Устанавливаем прогресс видео указателем мыши. */\n    const scrub = (event) => {\n        /**\n         * offsetX — свойство события мыши. Возвращает расстояние от «начала» элемента до позиции указателя мыши по координате X.\n         * nativeEvent — ссылка на нативное, НЕ кросс-браузерное событие.\n         *\n         * offsetWidth — возвращает ширину элемента.\n         * О разнице между event.target и event.currentTarget: https://github.com/facebook/react/issues/5733#issuecomment-167188516.\n         */\n        const { offsetX } = event.nativeEvent;\n        const { offsetWidth } = event.currentTarget;\n        const { duration } = videoRef.current;\n\n        const scrubTime = duration * offsetX / offsetWidth;\n\n        videoRef.current.currentTime = scrubTime;\n    };\n\n    const rangeUpdate = ({target}) => {\n        videoRef.current[ target.name ] = target.value;\n    };\n\n    const fullScreen = (elem) => {\n        if (elem.requestFullscreen) {\n            elem.requestFullscreen();\n        } else if (elem.mozRequestFullScreen) { /* Firefox */\n            elem.mozRequestFullScreen();\n        } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n            elem.webkitRequestFullscreen();\n        } else if (elem.msRequestFullscreen) { /* IE/Edge */\n            elem.msRequestFullscreen();\n        }\n    };\n\n    const fullScreenCancel = () => {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) { /* Firefox */\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) { /* IE/Edge */\n            document.msExitFullscreen();\n        }\n    };\n\n    const toggleFull = () => document.fullscreenElement ? fullScreenCancel() : fullScreen(videoContainerRef.current);\n\n    /*const cancelToggle = (event) => {\n        if (event.code === 'Space') {\n            event.preventDefault();\n        }\n    };*/\n\n    const playControl = isPlaying ? <>&#10074;&#10074;</> : <>&#9654;</>;\n\n    /* Добавляем слушатель вкл/выкл видео по нажатию на пробел. */\n    useEffect(() => {\n        // componentDidMount + componentWillUnmount\n        const handleKeydown = (event) => {\n            if (event.code === 'Space' && document.activeElement !== togglePlayRef.current) {\n                togglePlay();\n            }\n        };\n\n        /* Подписка, выполняется при первом рендере один раз. */\n        document.addEventListener('keydown', handleKeydown);\n\n        /* Отписка, выполняется при удалении компонента один раз. */\n        return () => document.removeEventListener('keydown', handleKeydown);\n        /* Эффект выполняется один раз, потому что вторым аргументом мы передали []. */\n    }, []);\n\n    return (\n        <div\n            className = 'player'\n            ref = { videoContainerRef }>\n            <video\n                ref = { videoRef }\n                src = { video }\n                onClick = { togglePlay }\n                onTimeUpdate = { handleProgress }\n            />\n            <div className = 'controls'>\n                <div\n                    className = 'progress'\n                    onClick = { scrub }\n                    onMouseDown = { () => setProgressCapturing(true) }\n                    onMouseMove = { (event) => isProgressCapturing && scrub(event) }\n                    onMouseUp = { () => setProgressCapturing(false) }>\n                    <div\n                        className = 'filled'\n                        style = {{\n                            '--filledProgressBar': `${progress}%`,\n                        }}\n                    />\n                </div>\n                <button\n                    ref = { togglePlayRef }\n                    title = 'Toggle Play'\n                    onClick = { togglePlay }>\n                    {playControl}\n                </button>\n                <input\n                    className = 'slider'\n                    max = '1'\n                    min = '0'\n                    name = 'volume'\n                    step = '0.05'\n                    type = 'range'\n                    onChange = { rangeUpdate }\n                />\n                <input\n                    className = 'slider'\n                    max = '2'\n                    min = '0.5'\n                    name = 'playbackRate'\n                    step = '0.1'\n                    type = 'range'\n                    onChange = { rangeUpdate }\n                />\n                <button\n                    data-skip = '-10'\n                    onClick = { skip }>\n                    « 10s\n                </button>\n                <button\n                    data-skip = '25'\n                    onClick = { skip }>\n                    25s »\n                </button>\n                <button onClick = { toggleFull }>&#10021;</button>\n            </div>\n        </div>\n    );\n};\n"],"sourceRoot":""}